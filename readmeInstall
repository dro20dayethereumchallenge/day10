day 0 ! ( check day 0 video if you haven't) 


sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
NODE_MAJOR=22
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install nodejs -y
npm install web3
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
npm i @openzeppelin/contracts@4.5.0   

#under the /home/ubuntu  directory...

mkdir todo
cd todo
npx hardhat init
cd contract
vi todoList.sol




pragma solidity ^0.8.9;


contract TodoList {
  uint public taskCount = 0;

  struct Task {
    uint id;
    string content;
    bool completed;
  }

  mapping(uint => Task) public tasks;

  event TaskCreated(
    uint id,
    string content,
    bool completed
  );

  event TaskCompleted(
    uint id,
    bool completed
 );

  constructor() public {  }

  function createTask(string memory _content) public {
    taskCount ++;
    tasks[taskCount] = Task(taskCount, _content, false);
    emit TaskCreated(taskCount, _content, false);
  }

  function toggleCompleted(uint _id) public {
    tasks[_id].completed = !tasks[_id].completed;
    emit TaskCompleted(_id, _task.completed);
  }

}






npx hardhat node --hostname localhost    # make sure to run as localhost vs the dns

npx hardhat console --network localhost

>await ethers.provider.getBalance("< my local address >")
npx hardhat console --network localhost
Welcome to Node.js v14.21.3.
Type ".help" for more information.
>  const signers = await ethers.getSigners();
undefined
> const contract =  await ethers.getContractFactory("TodoList")
undefined
>const bal = await ethers.provider.getBalance(signers[0])
> const cd = await contract.deploy()
> 
> await cd.createTask("walk dog")
>  await cd.createTask("take out trash")
>  await cd.createTask("pickp laundry")

> await cd.tasks(1)
Result(3) [ 1n, 'walk dog', false ]
> await cd.tasks(2)
Result(3) [ 2n, 'take out trash', false ]
> await cd.tasks(3)
Result(3) [ 3n, 'pickup laundry', false ]
> await cd.taskCount()
3n
> const events = await cd.queryFilter("TaskCreated")
undefined
>  events.forEach(e => console.log(e.args))
Result(3) [ 1n, 'walk dog', false ]
Result(3) [ 2n, 'take out trash', false ]
Result(3) [ 3n, 'pickup laundry', false ]
> await cd.toggleCompleted(1)
> await cd.toggleCompleted(3)
>  const events2 = await cd2.queryFilter("TaskCompleted")
undefined
> events2.forEach(e => console.log(e.args))




############ assertion testing
ubuntu@ip-172-31-41-170:~/test$ npx hardhat test


  TodoList Contract
    ✔ should start with zero tasks
    ✔ should create a task and emit TaskCreated
    ✔ should toggle task completion and emit TaskCompleted
    ✔ should toggle completion back to false
    1) should revert when toggling non-existent task


  4 passing (669ms)
  1 failing

  1) TodoList Contract
       should revert when toggling non-existent task:
     AssertionError: Expected transaction to be reverted
      at Context.<anonymous> (test/TodoList.js:62:5)




#### source code for assertion test: 
#### <project dir?/test/TodoList.js


const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("TodoList Contract", function () {
  let TodoList, todo, owner;

  beforeEach(async () => {
    [owner] = await ethers.getSigners();
    TodoList = await ethers.getContractFactory("TodoList");
    todo = await TodoList.deploy();
    await todo.waitForDeployment();
  });

  it("should start with zero tasks", async () => {
    const count = await todo.taskCount();
    expect(count).to.equal(0);
  });

  it("should create a task and emit TaskCreated", async () => {
    const tx = await todo.createTask("Write tests");
    const receipt = await tx.wait();

    const count = await todo.taskCount();
    expect(count).to.equal(1);

    const task = await todo.tasks(1);
    expect(task.id).to.equal(1);
    expect(task.content).to.equal("Write tests");
    expect(task.completed).to.equal(false);

    const event = receipt.logs.find(log => log.fragment.name === "TaskCreated");
    expect(event.args.id).to.equal(1);
    expect(event.args.content).to.equal("Write tests");
  });

  it("should toggle task completion and emit TaskCompleted", async () => {
    await todo.createTask("Test toggle");
    const original = await todo.tasks(1);
    expect(original.completed).to.equal(false);

    const tx = await todo.toggleCompleted(1);
    const receipt = await tx.wait();

    const updated = await todo.tasks(1);
    expect(updated.completed).to.equal(true);

    const event = receipt.logs.find(log => log.fragment.name === "TaskCompleted");
    expect(event.args.id).to.equal(1);
    expect(event.args.completed).to.equal(true);
  });

  it("should toggle completion back to false", async () => {
    await todo.createTask("Double toggle");
    await todo.toggleCompleted(1);
    await todo.toggleCompleted(1);

    const task = await todo.tasks(1);
    expect(task.completed).to.equal(false);
  });

  it("should revert when toggling non-existent task", async () => {
    await expect(todo.toggleCompleted(999)).to.be.reverted;
  });
});












##### NOTE: you can run a separate rpc server to monitor events - or monitor via a react.js app
#### not using this unless you do a formal deployment...!!!!!!! ... see day 4 for this type of implementation. 

terminal three: 

ubuntu@ip-172-31-46-232:~/hello/src$ npx hardhat console --network localhost
Welcome to Node.js v22.6.0.
Type ".help" for more information.
> const { ethers } = require("ethers");
undefined
>  let NewHelloAbi = require('./contractsData/Hello.json');
undefined
> let  HelloAddress = require('./contractsData/Hello-address.json');
undefined
> const provider = new ethers.JsonRpcProvider("http://ec2-52-89-102-52.us-west-2.compute.amazonaws.com:8545")
undefined
> const contract = new ethers.Contract(HelloAddress.address, NewHelloAbi.abi, provider);
undefined
>  const filter = contract.filters.myEventTest(null)
undefined
> contract.on(filter, (info) => {  console.log("info",info); });
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 413,
  [Symbol(trigger_async_id_symbol)]: 14
}
>
